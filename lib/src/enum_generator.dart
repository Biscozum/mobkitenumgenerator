import 'package:analyzer/dart/element/type.dart';
import 'package:mobkit_enum_generator/annotations.dart';
import 'package:build/build.dart';
import 'package:source_gen/source_gen.dart';
import 'package:analyzer/dart/constant/value.dart';
import 'package:analyzer/dart/element/element.dart';

class EnumGenerator extends GeneratorForAnnotation<EnumSerializable> {
  @override
  List<String> generateForAnnotatedElement(
    Element element,
    ConstantReader annotation,
    BuildStep buildStep,
  ) {
    //A warning is issued if the Annotation Enum is appended above an external type.
    if (element is! EnumElement) {
      throw InvalidGenerationSourceError(
        '`@EnumSerializable` can only be used on enum elements.',
        element: element,
      );
    }
    final value = generateEnumSource(element);
    return [
      if (value.isNotEmpty) value,
    ];
  }

  //Writes the codes generated by the Builder to the '.g.dart' files created later.
  String generateEnumSource(EnumElement element) {
    var classBuffer = StringBuffer();
    String cpClassName = element.name.toCapitalized();
    String cpEditedClassName = "${cpClassName}EnumMap";
    ElementAnnotation itemType = element.metadata.first;
    DartType? objectType = itemType.computeConstantValue()!.getField("e")!.toTypeValue();
    String typeStr = objectType!.isDartCoreInt ? "int" : "String";
    bool typeIsDescription = itemType.computeConstantValue()!.getField("isDescription")!.toBoolValue() ?? false;
    classBuffer.writeln("const Map<${element.name}, $typeStr>${cpClassName}EnumMap = {");
    for (int i = 0; i < element.fields.length - 1; i++) {
      if (element.fields[i].metadata.isNotEmpty) {
        ElementAnnotation item = element.fields[i].metadata.first;
        DartObject? object = item.computeConstantValue();
        dynamic valueDynamic;
        if (object != null) {
          if (objectType.isDartCoreInt && !typeIsDescription) {
            valueDynamic = object.getField("value")!.toIntValue();
            if (valueDynamic == null) {
              throw InvalidGenerationSourceError(
                'Specifying a int in '
                '@EnumSerializable'
                ' uses an String value in '
                '@EnumValue'
                '.',
                element: element,
              );
            }
            classBuffer.writeln("${element.name}.${element.fields[i].name} : $valueDynamic,");
          } else if (objectType.isDartCoreString && !typeIsDescription) {
            valueDynamic = object.getField("value")!.toStringValue();
            if (valueDynamic == null) {
              throw InvalidGenerationSourceError(
                'Specifying a String in '
                '@EnumSerializable'
                ' uses an int value in '
                '@EnumValue'
                '.',
                element: element,
              );
            }
            if (valueDynamic.toString().isEmpty) {
              classBuffer.writeln("${element.name}.${element.fields[i].name} : ${'""'},");
            } else if (valueDynamic.toString().isNotEmpty) {
              classBuffer.writeln("${element.name}.${element.fields[i].name} : '$valueDynamic',");
            }
          } else if (objectType.isDartCoreInt && typeIsDescription) {
            Set<DartObject>? mySet = object.getField("value")!.toSetValue();
            valueDynamic = mySet!.elementAt(0).toIntValue();
            if (valueDynamic == null) {
              throw InvalidGenerationSourceError(
                'Specifying a String in '
                '@EnumSerializable'
                ' uses an int value in '
                '@EnumValue'
                '.',
                element: element,
              );
            }
            classBuffer.writeln("${element.name}.${element.fields[i].name} : $valueDynamic,");
          } else if (objectType.isDartCoreString && typeIsDescription) {
            Set<DartObject>? mySet = object.getField("value")!.toSetValue();
            valueDynamic = mySet!.elementAt(0).toStringValue();
            if (valueDynamic == null) {
              throw InvalidGenerationSourceError(
                'Specifying a String in '
                '@EnumSerializable'
                ' uses an int value in '
                '@EnumValue'
                '.',
                element: element,
              );
            }
            if (valueDynamic.toString().isEmpty) {
              classBuffer.writeln("${element.name}.${element.fields[i].name} : ${'""'},");
            } else if (valueDynamic.toString().isNotEmpty) {
              classBuffer.writeln("${element.name}.${element.fields[i].name} : '$valueDynamic',");
            }
          }
        }
      } else if (element.fields[i].metadata.isEmpty) {
        classBuffer.writeln("${element.name}.${element.fields[i].name} : $i,");
      }
    }
    classBuffer.writeln("};");
    classBuffer.writeln("extension ${element.name}Extension on ${element.name} {");
    classBuffer.writeln("$typeStr toValue() {");
    classBuffer.writeln("return $cpEditedClassName[this]!;");
    classBuffer.writeln("}");
    classBuffer.writeln("}");

    if (typeIsDescription) {
      classBuffer.writeln("extension ${element.name}DescriptionExtension on ${element.name} {");
      classBuffer.writeln("String toDescription() {");
      classBuffer.writeln("switch(this) {");
      for (int i = 0; i < element.fields.length - 1; i++) {
        if (element.fields[i].metadata.isNotEmpty) {
          ElementAnnotation item = element.fields[i].metadata.first;
          DartObject? object = item.computeConstantValue();
          dynamic valueDynamic;
          if (object != null) {
            Set<DartObject>? mySet = object.getField("value")!.toSetValue();
            valueDynamic = mySet!.elementAt(1).toStringValue();
            if (valueDynamic == null) {
              throw InvalidGenerationSourceError(
                'Specifying a String in '
                '@EnumSerializable'
                ' uses an int value in '
                '@EnumValue'
                '.',
                element: element,
              );
            }
            classBuffer.writeln("case ${element.name}.${element.fields[i].name}:");
            classBuffer.writeln("return '$valueDynamic';");
          }
        } else if (element.fields[i].metadata.isEmpty) {
          classBuffer.writeln("case ${element.name}.${element.fields[i].name}:");
          classBuffer.writeln("return " "$i" ";");
        }
      }
      classBuffer.writeln("default:");
      classBuffer.writeln("return '';");
      classBuffer.writeln("}");
      classBuffer.writeln("}");
      classBuffer.writeln("}");
    }
    return classBuffer.toString();
  }
}

//Method does transform first letter a uppercase of the String or returns empty String
extension StringCasingExtension on String {
  String toCapitalized() => length > 0 ? substring(0, 1).toLowerCase() + substring(1, length) : '';
}
